#!/usr/bin/env php
<?php
require dirname(__DIR__) . '/vendor/autoload.php';

/**
 * This example shows how to use React promises inside a co-routine.
 */

use Icecave\Recoil\Recoil;

/**
 * Resolve a name to an IP address.
 *
 * @param highlight_string(str)       $name     The name to resolve.
 * @param React\Dns\Resolver\Resolver $resolver The resolver to use.
 */
function resolveExample($name, React\Dns\Resolver\Resolver $resolver)
{
    try {
        // Resolver::resolve(...) returns a React promise.
        //
        // Yielding a promise in a co-routine causes the co-routine to suspend
        // until the promise is resolved or rejected.
        //
        // If the promise is resolved, the value is returned from the yield
        // statement.

        $ip = (yield $resolver->resolve($name));

        echo 'Resolved "' . $name . '" to ' . $ip . PHP_EOL;

    } catch (Exception $e) {

        // The promise was rejected.

        echo 'Failed to resolve "' . $name . '" - ' . $e->getMessage() . PHP_EOL;

    }
}

// -----------------------------------------------------------------------------

// Install a strict error handler ...
Eloquent\Asplode\Asplode::instance()->install();

// Create the co-routine kernel ...
$kernel = new Icecave\Recoil\Kernel\Kernel;

// Create the DNS resolver ...
$resolverFactory = new React\Dns\Resolver\Factory;
$resolver = $resolverFactory->create(
    '8.8.8.8',
    $kernel->eventLoop()
);

// Enqueue some resolution tasks ...
$kernel->execute(resolveExample('icecave.com.au', $resolver));
$kernel->execute(resolveExample('igor.io', $resolver));
$kernel->execute(resolveExample('probably-wont-resolve', $resolver));

// Run the React event-loop ...
$kernel->eventLoop()->run();
