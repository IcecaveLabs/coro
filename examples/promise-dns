#!/usr/bin/env php
<?php
require dirname(__DIR__) . '/vendor/autoload.php';

/**
 * This example shows how to use React promises inside a coroutine.
 */

use Icecave\Recoil\Recoil;

/**
 * Resolve a name to an IP address.
 *
 * @param string                      $name     The name to resolve.
 * @param React\Dns\Resolver\Resolver $resolver The resolver to use.
 */
function resolveDomainName($name, React\Dns\Resolver\Resolver $resolver)
{
    try {
        // Resolver::resolve(...) returns a React promise.
        //
        // Yielding a promise in a coroutine causes the coroutine to suspend
        // until the promise is resolved or rejected.
        //
        // If the promise is resolved, the value is returned from the yield
        // statement.

        $ip = (yield $resolver->resolve($name));

        echo 'Resolved "' . $name . '" to ' . $ip . PHP_EOL;

    } catch (Exception $e) {

        // The promise was rejected.

        echo 'Failed to resolve "' . $name . '" - ' . $e->getMessage() . PHP_EOL;

    }
}

// -----------------------------------------------------------------------------

Recoil::run(
    function () {
        $resolver = (new React\Dns\Resolver\Factory)->create(
            '8.8.8.8',
            (yield Recoil::eventLoop())
        );

        yield Recoil::execute(resolveDomainName('icecave.com.au', $resolver));
        yield Recoil::execute(resolveDomainName('reactphp.org', $resolver));
        yield Recoil::execute(resolveDomainName('probably-wont-resolve', $resolver));
    }
);
